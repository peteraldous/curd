.type course <: symbol
.type req <: symbol

#define TERM_MIN_CREDITS 12
#define TERM_MAX_CREDITS 18
#define TERMS 8
#define TOTAL_CREDITS 120
#define IDEAL TOTAL_CREDITS / TERMS

.decl Courses(c: course, credits: number)
.input Courses

.decl Requirements(r: req)
.input Requirements

.decl Satisfies(c: course, r: req)
.input Satisfies

.decl Ordered(pre: course, post: course)
.input Ordered

Ordered(a,c) :- Ordered(a,b), Ordered(b, c).

.decl Unordered(c1: course, c2: course)
Unordered(c1, c2), Unordered(c2, c1) :-
    Courses(c1, _),
    Courses(c2, _),
    c1 != c2,
    !Ordered(c1, c2),
    !Ordered(c2, c1).

.type CourseList = Courses { c: course, rest: CourseList } | NoCourse {}

.decl PotentialTerm(courses: CourseList, credits: number)

PotentialTerm($Courses(c, $NoCourse()), credits) :- Courses(c, credits), credits <= TERM_MAX_CREDITS.
PotentialTerm($Courses(c, t), total) :-
    Courses(c, c_credits),
    c < first,
    PotentialTerm(t, t_credits),
    NoConflicts(c, t),
    t = $Courses(first, _),
    total = t_credits + c_credits,
    total <= TERM_MAX_CREDITS.

.decl NoConflicts(c: course, cs: CourseList)
NoConflicts(c, $NoCourse()) :- Courses(c, _).
NoConflicts(c, t) :-
    Courses(c, _),
    Courses(first, _),
    Unordered(c, first),
    t = $Courses(first, rest),
    PotentialTerm(t, _),
    NoConflicts(c, rest).

.decl Term(courses: CourseList, credits: number)

Term(c, cs) :- cs >= TERM_MIN_CREDITS, PotentialTerm(c, cs).

.type TermList = Terms { t: CourseList, rest: TermList } | NoTerm {}

.decl MayPrecede(before: CourseList, after: CourseList)
MayPrecede($NoCourse(), after) :- Term(after, _).
MayPrecede(before, after) :-
    Term(before, _),
    Term(after, _),
    before = $Courses(c, _),
    AllNotLater(c, after).

.decl AllNotLater(c: course, after: CourseList)
AllNotLater(c, $NoCourse()) :- Courses(c, _).
AllNotLater(c, courses) :-
    Courses(c, _),
    Courses(first, _),
    courses = $Courses(first, rest),
    Term(courses, _),
    !Ordered(first, c),
    AllNotLater(c, rest).

.decl MayPrecedeAll(before: CourseList, afters: TermList)
MayPrecedeAll(before, $NoTerm()) :- Term(before, _).
MayPrecedeAll(before, $Terms(first, rest)) :-
    Term(before, _),
    Term(first, _),
    MayPrecede(before, first),
    MayPrecedeAll(before, rest).

// The score is the summed difference between each semester's credit load and
// the average number of credits in a term. The lower, the better.
.decl PotentialSchedule(terms: TermList, credits: number, score: number)
PotentialSchedule($Terms(term, $NoTerm()), credits, score) :-
    Term(term, credits),
    credits <= TOTAL_CREDITS,
    (score = IDEAL - credits, score >= 0;
     score = credits - IDEAL, score >= 0).
PotentialSchedule($Terms(term, terms), total, score + terms_score) :-
    Term(term, term_credits),
    PotentialSchedule(terms, terms_credits, terms_score),
    total = term_credits + terms_credits,
    total <= TOTAL_CREDITS,
    MayPrecedeAll(term, terms),
    (score = IDEAL - term_credits, score >= 0;
     score = term_credits - IDEAL, score >= 0).

.decl FullSchedule(terms: TermList, credits: number, score: number)
FullSchedule(terms, credits, score) :- PotentialSchedule(terms, credits, score), credits >= TOTAL_CREDITS.

.decl PartialSchedule(terms: TermList)
PartialSchedule(terms) :- FullSchedule(terms, _, _).
PartialSchedule(rest) :- PartialSchedule($Terms(_, rest)).

.decl PartialScheduleTerms(term: CourseList)
PartialScheduleTerms(term) :- PartialSchedule($Terms(term, _)).

.decl PartialTerm(courses: CourseList)
PartialTerm(courses) :- PartialScheduleTerms(courses).
PartialTerm(rest) :- PartialTerm($Courses(_, rest)).

.decl PartialTermSatisfies(courses: CourseList, r: req)
PartialTermSatisfies(courses, r) :-
    Requirements(r),
    Courses(c, _),
    (Satisfies(c, r);
     PartialTermSatisfies(rest, r)),
    courses = $Courses(c, rest),
    PartialTerm(courses).

.decl TermSatisfies(courses: CourseList, r: req)
TermSatisfies(courses, r) :-
    PartialTermSatisfies(courses, r),
    Term(courses, _).

.decl ScheduleSatisfies(terms: TermList, r: req)
ScheduleSatisfies(schedule, r) :-
    Requirements(r),
    Courses(c, _),
    Satisfies(c, r),
    schedule = $Terms(first, rest),
    PartialSchedule(schedule),
    (TermSatisfies(first, r);
     ScheduleSatisfies(rest, r)).

.decl Schedule(terms: TermList, score: number)
Schedule(terms, score) :-
    FullSchedule(terms, _, score),
    count : { Requirements(_) } = count : { Requirements(r), ScheduleSatisfies(terms, r) }.

.output Schedule
.output PotentialSchedule
